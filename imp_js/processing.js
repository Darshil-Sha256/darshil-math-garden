var model;

function predict() {
	console.log('Processing');
	let image = cv.imread(canvas);
	//rgb color to grayscale
	cv.cvtColor(image, image, cv.COLOR_RGBA2GRAY, 0);
	//covert greyish pixels to pure white for better contrast
	cv.threshold(image, image, 175, 255, cv.THRESH_BINARY);

	let contours = new cv.MatVector();
	let hierarchy = new cv.Mat();
	// find contours
	cv.findContours(image, contours, hierarchy, cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE);
	let cnt = contours.get(0);
	// get rectangle that bounds the contours
	let rect = cv.boundingRect(cnt);
	//crop image to the rectangle only
	image = image.roi(rect);

	var height = image.rows;
	var width = image.cols;

	if (height > width) {
		height = 20;
		var scaleFactor = image.rows / height;
		width = Math.round(width / scaleFactor);
	} else {
		width = 20;
		var scaleFactor = image.cols / 20;
		height = Math.round(image.rows / scaleFactor);
	}

	let newSize = new cv.Size(width, height);
	cv.resize(image, image, newSize, 0, 0, cv.INTER_AREA);

	//Let's add padding so that then image we have is similiar to the images we trained the model on
	//Training image is 28*28, where in 4px padding is done all side

	const topPadding = Math.ceil(4 + (20 - height) / 2);
	const bottomPadding = Math.floor(4 + (20 - height) / 2);
	const leftPadding = Math.ceil(4 + (20 - width) / 2);
	const rightPadding = Math.floor(4 + (20 - width) / 2);

	// console.log(`(top, bottom, left, right) :- ${topPadding} ${bottomPadding} ${leftPadding} ${rightPadding}`);
	const blackPadding = new cv.Scalar(0, 0, 0, 0); //RGBA - red, green, blue, alpha(opaqueness)
	cv.copyMakeBorder(
		image,
		image,
		topPadding,
		bottomPadding,
		leftPadding,
		rightPadding,
		cv.BORDER_CONSTANT,
		blackPadding
	);

	//Centre Of Mass
	cv.findContours(image, contours, hierarchy, cv.RETR_CCOMP, cv.CHAIN_APPROX_SIMPLE);
	cnt = contours.get(0);
	const Moments = cv.moments(cnt, false);

	const cx = Moments.m10 / Moments.m00;
	const cy = Moments.m01 / Moments.m00;

	// console.log(`total area , (centroidx, centroidy) :- ${Moments.m00}, (${cx} ${cy})`);

	//Shifting the digit so that the digit's centre of mass is at the centre of the image
	let X_SHIFT = Math.round(image.rows / 2 - cx);
	let Y_SHIFT = Math.round(image.cols / 2 - cy);
	newSize = new cv.Size(image.cols, image.rows);
	let M = cv.matFromArray(2, 3, cv.CV_64FC1, [ 1, 0, X_SHIFT, 0, 1, Y_SHIFT ]);
	cv.warpAffine(image, image, M, newSize, cv.INTER_LINEAR, cv.BORDER_CONSTANT, blackPadding);

	//Normalize the pixel values to range (0,255)
	var pixelValues = image.data;
	pixelValues = Float32Array.from(pixelValues);
	pixelValues = pixelValues.map(function(item) {
		item = item / 255.0;
		return item;
	});
	// console.log(`Pixel values of pre-processed image :- ${pixelValues}`);
	const pixelsTensor = tf.tensor([ pixelValues ]);

	//Prediction
	const result = model.predict(pixelsTensor);
	// var ind = tf.argmax(result)
	const values = result.dataSync();
	var indexOfMaxValue = values.reduce((iMax, x, i, arr) => (x > arr[iMax] ? i : iMax), 0);
	result.print();
	console.log(indexOfMaxValue);

	// //Testin only (Will delete later)
	// const outputCanvas = document.createElement('CANVAS');
	// cv.imshow(outputCanvas, image);
	// document.body.appendChild(outputCanvas);

	//cleanup...recommended in openCV documentation
	image.delete();
	contours.delete();
	cnt.delete();
	hierarchy.delete();
	M.delete();
	//cleanup tensors
	pixelsTensor.dispose();
	result.dispose();

	return indexOfMaxValue;
}

async function loadModel() {
	const modelUrl = 'tfjs/model.json';
	const sampleData = [
		[
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.33,
			0.73,
			0.62,
			0.59,
			0.24,
			0.14,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.87,
			1.0,
			1.0,
			1.0,
			1.0,
			0.95,
			0.78,
			0.78,
			0.78,
			0.78,
			0.78,
			0.78,
			0.78,
			0.78,
			0.67,
			0.2,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.26,
			0.45,
			0.28,
			0.45,
			0.64,
			0.89,
			1.0,
			0.88,
			1.0,
			1.0,
			1.0,
			0.98,
			0.9,
			1.0,
			1.0,
			0.55,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.07,
			0.26,
			0.05,
			0.26,
			0.26,
			0.26,
			0.23,
			0.08,
			0.93,
			1.0,
			0.42,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.33,
			0.99,
			0.82,
			0.07,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.09,
			0.91,
			1.0,
			0.33,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.51,
			1.0,
			0.93,
			0.17,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.23,
			0.98,
			1.0,
			0.24,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.52,
			1.0,
			0.73,
			0.02,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.04,
			0.8,
			0.97,
			0.23,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.49,
			1.0,
			0.71,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.29,
			0.98,
			0.94,
			0.22,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.07,
			0.87,
			1.0,
			0.65,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.01,
			0.8,
			1.0,
			0.86,
			0.14,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.15,
			1.0,
			1.0,
			0.3,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.12,
			0.88,
			1.0,
			0.45,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.52,
			1.0,
			1.0,
			0.2,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.24,
			0.95,
			1.0,
			1.0,
			0.2,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.47,
			1.0,
			1.0,
			0.86,
			0.16,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.47,
			1.0,
			0.81,
			0.07,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0,
			0.0
		]
	];
	const sampleTensor = tf.tensor(sampleData);
	model = await tf.loadLayersModel(modelUrl);
	// console.log(model)
	const result = model.predict(sampleTensor);
	// var ind = tf.argmax(result)
	const values = result.dataSync();
	var indexOfMaxValue = values.reduce((iMax, x, i, arr) => (x > arr[iMax] ? i : iMax), 0);
	// result.print();
	// console.log(indexOfMaxValue);
}
